<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Essaim Apps Oy</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-01-22T11:00:08+02:00</updated>
<id>/</id>
<author>
  <name>Olli Pöyry</name>
  <uri>/</uri>
  <email>olli.poyry@essaim.fi</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Using Redis pub/sub queue for providing feedback loop in asynchronous tests]]></title>
  <link rel="alternate" type="text/html" href="/redis-latch/" />
  <id>/redis-latch</id>
  <published>2015-01-20T00:00:00+02:00</published>
  <updated>2015-01-20T00:00:00+02:00</updated>
  <author>
    <name>Olli Pöyry</name>
    <uri></uri>
    <email>olli.poyry@essaim.fi</email>
  </author>
  <content type="html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code described below is able to provide a fast feedback loop from server back to client even when multiple threads are concurrently sending asynchronous requests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each asynchronous request will embed a unique identifier that is passed back through a [Redis pub/sub queue](&lt;a href=&quot;http://redis.io/topics/pubsub&quot; class=&quot;bare&quot;&gt;http://redis.io/topics/pubsub&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring bean &lt;code&gt;&lt;code&gt;ResponseWaitUtil&lt;/code&gt;&lt;/code&gt; spawns a background thread on the client side with a Redis pub/sub listener&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;code&gt;java.util.concurrent.CountDownLatch&lt;/code&gt;&lt;/code&gt; is used to make the client thread wait for the response&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&lt;code&gt;ResponseWaitUtil&lt;/code&gt;&lt;/code&gt; bean contains a &lt;code&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;&lt;/code&gt; that maps each waiting request id to a corresponding &lt;code&gt;&lt;code&gt;CountDownLatch&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a response is received through the Redis queue the corresponding latch is freed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Value(&quot;${wait.for.response.sec:30}&quot;)
int waitForResponseSec;
@Resource
ResponseWaitUtil responseWaitUtil;


final String requestId = testUtil.getNextBusinessId();
CountDownLatch countDownLatch = responseWaitUtil.addLatchForRequest(requestId);
sampleResult.sampleStart(); // Apache JMeter start timer


// Execute ASYNC call e.g. something like:
executeUpload(uploadRequest, requestId);


LOG.debug(&quot;Waiting {} seconds for response from backend on Redis pub/sub channel {}, Redis URL {}...&quot;,
waitForResponseSec, ResponseWaitUtil.REDIS_CHANNEL_NAME, responseWaitUtil.getRedisUrl());
if (countDownLatch.await(waitForResponseSec, TimeUnit.SECONDS)) {
sampleResult.sampleEnd(); // Apache JMeter stop timer
...
} else {
sampleResult.setSuccessful(false);
...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before sending an asynchronous request a &lt;code&gt;&lt;code&gt;CountDownLatch&lt;/code&gt;&lt;/code&gt; is created and added to the map &lt;code&gt;&lt;code&gt;mapRequestIdToLatch&lt;/code&gt;&lt;/code&gt;. After receiving a response through the queue the &lt;code&gt;&lt;code&gt;JedisPubSub&lt;/code&gt;&lt;/code&gt; listener defined in &lt;code&gt;&lt;code&gt;ResponseWaitUtil&lt;/code&gt;&lt;/code&gt; executes &lt;code&gt;&lt;code&gt;countDown()&lt;/code&gt;&lt;/code&gt; on the latch mapped to the request id received through the queue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What happens if the feedback loop from server is lightning fast and the latch is freed before the client program gets into &lt;code&gt;&lt;code&gt;countDownLatch.await&lt;/code&gt;&lt;/code&gt;? No worries - then the program will just continue with no wait.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Component
public class ResponseWaitUtil {


@Value(&quot;${redis.url:localhost}&quot;)
String redisUrl;


public static final String REDIS_CHANNEL_NAME = ResponseWaitUtil.class.getName();


Map&amp;lt;String, CountDownLatch&amp;gt; mapRequestIdToLatch = new ConcurrentHashMap&amp;lt;String, CountDownLatch&amp;gt;();


public CountDownLatch addLatchForRequest(String requestId) {
CountDownLatch countDownLatch = new CountDownLatch(1);
mapRequestIdToLatch.put(requestId, countDownLatch);
return countDownLatch;
}


final JedisPubSub jedisPubSub = new JedisPubSub() {


@Override
public void onMessage(String channel, String message) {
if (StringUtils.equals(channel, REDIS_CHANNEL_NAME)) {
String requestId = StringUtils.substringBefore(message, &quot;+&quot;);
CountDownLatch countDownLatch = mapRequestIdToLatch.get(requestId);
if (countDownLatch != null) {
LOG.info(&quot;Redis pub/sub onMessage got message {}, continue thread&quot;, message);
mapRequestIdToLatch.remove(requestId);
if (StringUtils.contains(message, &quot;+&quot;)) {
mapRequestIdToMessage.put(requestId, message);
}
countDownLatch.countDown();
} else {
LOG.warn(&quot;SYSTEM ERROR latch not found for request id {}, mapRequestIdToLatch keyset {}&quot;, message, mapRequestIdToLatch.keySet());
}
}
}
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The pub/sub listener in &lt;code&gt;&lt;code&gt;ResponseWaitUtil&lt;/code&gt;&lt;/code&gt; is spawned as a background thread in the client before executing any asynchronous requests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;ExecutorService executor;
Future future;


public synchronized void init() {
if (future == null) {
LOG.debug(&quot;Start background thread for getting responses from backend through Redis&quot;);
executor = Executors.newFixedThreadPool(1);
future = executor.submit(redisListenerTask);
}
}


public synchronized void destroy() {
if (future != null) {
try {
jedisPubSub.unsubscribe();
executor.shutdownNow();
future = null;
executor = null;
LOG.debug(&quot;Background thread for getting responses through Redis closed&quot;);
} catch (Exception ex) {
LOG.error(&quot;Error in destroying Redis listener&quot;, ex);
}
}
}


class RedisListenerTask implements Runnable {


public void run() {
Jedis jedis = null;
try {
jedis = new Jedis(redisUrl);
jedis.subscribe(jedisPubSub, REDIS_CHANNEL_NAME);
} catch (Exception ex) {
LOG.error(&quot;Error&quot;, ex);
} finally {
if (jedis != null)
jedis.quit();
jedis = null;
}
}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The unique id for the asynchronous request is built up using a resource (e.g. Spring bean) with a counter value as part of the returned request id string.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;static String receiverBeginning = &quot;FI&quot; + RandomStringUtils.randomNumeric(3);
static String businessIdPostfix = RandomStringUtils.randomNumeric(1);


public String getNextBusinessId() {
int counterValue = businessIdCounter.incrementAndGet();
return receiverBeginning + StringUtils.leftPad(String.valueOf(counterValue), 4, &quot;0&quot;) + businessIdPostfix;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Request id could as well be generated with something like &lt;code&gt;UUID.randomUUID().toString()&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the server side the service responding to the asynchronous request picks the Redis host name and pub/sub queue name from the message having embedded a string like below somewhere in the request:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;ns2:StreetName&amp;gt;[CALLBACK REDIS:localhost:ResponseWaitUtil:FI68400018]&amp;lt;/ns2:StreetName&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the host name or host and port combination for Redis is provided in the request, thus it does not need to be configured on the server side. Also the name of the pub/sub queue used is embedded in the callback string.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Depending on the service some additional information may be sent to the client by appending a string after a separator character (here +), for instance a database primary key generated in the service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;String restAddressToCallback = StringUtils.substringBetween(requestMessage, &quot;[CALLBACK &quot;, &quot;]&quot;);
executeRedisPub(restAddressToCallback + (databaseId != null ? &quot;+&quot; + databaseId : &quot;&quot;));


public void executeRedisPub(String url) throws Exception {
Jedis jedis = null;
try {
String arr[] = StringUtils.split(url, &quot;:&quot;);
if (arr.length != 4)
throw new Exception(&quot;SYSTEM ERROR, callback URL for Redis should be of format REDIS:host:topic:requestid, erroneous url was&quot; + url);
jedis = new Jedis(arr[1]);
jedis.publish(arr[2], arr[3]);
LOG.debug(&quot;&amp;gt;&amp;gt;Publish request id {} to Redis on host {} using topic {}&quot;, arr[3], arr[1], arr[2]);
} finally {
if (jedis != null)
jedis.quit();
}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;JedisPubSub&lt;/strong&gt; &lt;strong&gt;onMessage&lt;/strong&gt; listener in &lt;code&gt;&lt;code&gt;ResponseWaitUtil&lt;/code&gt;&lt;/code&gt; adds responses with any extra information to a &lt;code&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;&lt;/code&gt; where it can be queried. &lt;code&gt;&lt;code&gt;getMessageByRequestId&lt;/code&gt;&lt;/code&gt; below has a side effect of removing the entry on query. The actual payload (e.g. database row id) of the returned extra information can be extracted with &lt;code&gt;&lt;code&gt;StringUtils.substringAfter(message, &quot;+&quot;);.&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Map&amp;lt;String, String&amp;gt; mapRequestIdToMessage = new ConcurrentHashMap&amp;lt;String, String&amp;gt;();


// Populate map in JedisPubSub onMessage:
if (StringUtils.contains(message, &quot;+&quot;)) {
mapRequestIdToMessage.put(requestId, message);
}


public String getMessageByRequestId(String requestId) {
return mapRequestIdToMessage.remove(requestId);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Redis pub/sub queue is faster and easier to configure as a feedback channel than alternatives like JMS or a http connection as the flow is from server side to the client.&lt;/p&gt;
&lt;/div&gt;
  &lt;p&gt;&lt;a href=&quot;/redis-latch/&quot;&gt;Using Redis pub/sub queue for providing feedback loop in asynchronous tests&lt;/a&gt; was originally published by Olli Pöyry at &lt;a href=&quot;&quot;&gt;Essaim Apps Oy&lt;/a&gt; on January 20, 2015.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[What do we do, anyway?]]></title>
  <link rel="alternate" type="text/html" href="/jekyll/testing/What-do-we-do-anyway/" />
  <id>/jekyll/testing/What-do-we-do-anyway</id>
  <published>2013-12-08T21:55:16+02:00</published>
  <updated>2013-12-08T21:55:16+02:00</updated>
  <author>
    <name>Olli Pöyry</name>
    <uri></uri>
    <email>olli.poyry@essaim.fi</email>
  </author>
  <content type="html">&lt;p&gt;Herring Cove is a clean and responsive theme for Jekyll.&lt;/p&gt;

&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Fixed Sidebar with social links&lt;/li&gt;
  &lt;li&gt;Minimal design&lt;/li&gt;
  &lt;li&gt;Comments by Disqus&lt;/li&gt;
  &lt;li&gt;Social Sharing abilities&lt;/li&gt;
  &lt;li&gt;Easy to configure&lt;/li&gt;
  &lt;li&gt;Based on Bootstrap&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;screenshots&quot;&gt;Screenshots&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshot1.png&quot; alt=&quot;screenshot&quot; /&gt;
&lt;img src=&quot;/images/screenshot2.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Install Jekyll&lt;/li&gt;
  &lt;li&gt;Fork or &lt;a href=&quot;https://github.com/arnp/herring-cove/archive/master.zip&quot;&gt;download&lt;/a&gt; this theme repo&lt;/li&gt;
  &lt;li&gt;Edit the &lt;code&gt;_config.yml&lt;/code&gt; file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can change the showcase image by replacing &lt;code&gt;showcase.jpg&lt;/code&gt; file in the &lt;code&gt;images&lt;/code&gt; folder. I’ll try to find a better way to do this soon.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/arnp/herring-cove/archive/master.zip&quot;&gt;download&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;license&quot;&gt;License&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://opensource.org/licenses/MIT&quot;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;Herring Cove is always a work in progress and as such, I hope to clean up the code and add features as time permits. Feel free to add your own additions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What’s with the name?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.capecodbeachchair.com/beachguide/index.cfm?page=3&amp;amp;BeachID=5&quot;&gt;Herring Cove&lt;/a&gt; is a beach on Cape Cod in Provincetown, Massachusetts. If you’re in the area, be sure to check it out!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/jekyll/testing/What-do-we-do-anyway/&quot;&gt;What do we do, anyway?&lt;/a&gt; was originally published by Olli Pöyry at &lt;a href=&quot;&quot;&gt;Essaim Apps Oy&lt;/a&gt; on December 08, 2013.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Samples]]></title>
  <link rel="alternate" type="text/html" href="/Samples/" />
  <id>/Samples</id>
  <published>2013-12-04T00:00:00+02:00</published>
  <updated>2013-12-04T00:00:00+02:00</updated>
  <author>
    <name>Olli Pöyry</name>
    <uri></uri>
    <email>olli.poyry@essaim.fi</email>
  </author>
  <content type="html">&lt;h1 id=&quot;samples&quot;&gt;Samples&lt;/h1&gt;

&lt;h1 id=&quot;heading-1&quot;&gt;Heading 1&lt;/h1&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;Heading 2&lt;/h2&gt;

&lt;h3 id=&quot;heading-3&quot;&gt;Heading 3&lt;/h3&gt;

&lt;h4 id=&quot;heading-4&quot;&gt;Heading 4&lt;/h4&gt;

&lt;h5 id=&quot;heading-5&quot;&gt;Heading 5&lt;/h5&gt;

&lt;h6 id=&quot;heading-6&quot;&gt;Heading 6&lt;/h6&gt;

&lt;h3 id=&quot;body-text&quot;&gt;Body text&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Lorem ipsum dolor sit amet&lt;/strong&gt;, consectetur adipiscing elit. Quisque tempus nunc diam, non dignissim risus tincidunt a. Curabitur consequat justo vitae ipsum accumsan tempor. Quisque rhoncus eleifend ante vitae ultricies. Pellentesque suscipit nisl ut metus tincidunt, vulputate sodales dui commodo. Sed eget sapien varius, lacinia lectus nec, tempor dolor. Pellentesque sed mattis magna. Curabitur ut tristique turpis. Morbi sagittis dolor suscipit urna placerat, consectetur venenatis sapien viverra. Mauris vitae felis et sem venenatis cursus.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cc.jpg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Donec ornare turpis non ullamcorper pulvinar. &lt;em&gt;Integer ut mauris vehicula mauris posuere adipiscing.&lt;/em&gt; Phasellus dictum cursus convallis. Sed dapibus laoreet porttitor.&lt;/p&gt;

&lt;h3 id=&quot;blockquotes&quot;&gt;Blockquotes&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fusce non eleifend nisi. Donec pharetra sed ipsum sit amet sollicitudin. Duis dolor ante, gravida varius neque eget, semper commodo libero. In euismod tempor lobortis. Nulla eget lectus nec enim mattis aliquet a sit amet est.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;list-types&quot;&gt;List Types&lt;/h2&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Item One
    &lt;ol&gt;
      &lt;li&gt;sub one&lt;/li&gt;
      &lt;li&gt;sub two&lt;/li&gt;
      &lt;li&gt;sub three&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Item Two&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Uno&lt;/li&gt;
  &lt;li&gt;Dos&lt;/li&gt;
  &lt;li&gt;Tres&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


  &lt;p&gt;&lt;a href=&quot;/Samples/&quot;&gt;Samples&lt;/a&gt; was originally published by Olli Pöyry at &lt;a href=&quot;&quot;&gt;Essaim Apps Oy&lt;/a&gt; on December 04, 2013.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Welcome to Jekyll!]]></title>
  <link rel="alternate" type="text/html" href="/jekyll/update/welcome-to-jekyll/" />
  <id>/jekyll/update/welcome-to-jekyll</id>
  <published>2013-11-08T21:55:16+02:00</published>
  <updated>2013-11-08T21:55:16+02:00</updated>
  <author>
    <name>Olli Pöyry</name>
    <uri></uri>
    <email>olli.poyry@essaim.fi</email>
  </author>
  <content type="html">&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;/jekyll/update/welcome-to-jekyll/&quot;&gt;Welcome to Jekyll!&lt;/a&gt; was originally published by Olli Pöyry at &lt;a href=&quot;&quot;&gt;Essaim Apps Oy&lt;/a&gt; on November 08, 2013.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Sample Post]]></title>
  <link rel="alternate" type="text/html" href="/sample-post/" />
  <id>/sample-post</id>
  <updated>2013-05-31T00:00:00-00:00</updated>
  <published>2011-03-10T00:00:00+02:00</published>
  
  <author>
    <name>Olli Pöyry</name>
    <uri></uri>
    <email>olli.poyry@essaim.fi</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Overview&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#html-elements&quot;&gt;HTML Elements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heading-1&quot;&gt;Heading 1&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#heading-2&quot;&gt;Heading 2&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#heading-3&quot;&gt;Heading 3&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#heading-4&quot;&gt;Heading 4&lt;/a&gt;                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#heading-5&quot;&gt;Heading 5&lt;/a&gt;                    &lt;ul&gt;
                      &lt;li&gt;&lt;a href=&quot;#heading-6&quot;&gt;Heading 6&lt;/a&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#body-text&quot;&gt;Body text&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#blockquotes&quot;&gt;Blockquotes&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#list-types&quot;&gt;List Types&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#ordered-lists&quot;&gt;Ordered Lists&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#unordered-lists&quot;&gt;Unordered Lists&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tables&quot;&gt;Tables&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#code-snippets&quot;&gt;Code Snippets&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#buttons&quot;&gt;Buttons&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#notices&quot;&gt;Notices&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;h2 id=&quot;html-elements&quot;&gt;HTML Elements&lt;/h2&gt;

&lt;p&gt;Below is just about everything you’ll need to style in the theme. Check the source code to see the many embedded elements within paragraphs.&lt;/p&gt;

&lt;h1 id=&quot;heading-1&quot;&gt;Heading 1&lt;/h1&gt;

&lt;h2 id=&quot;heading-2&quot;&gt;Heading 2&lt;/h2&gt;

&lt;h3 id=&quot;heading-3&quot;&gt;Heading 3&lt;/h3&gt;

&lt;h4 id=&quot;heading-4&quot;&gt;Heading 4&lt;/h4&gt;

&lt;h5 id=&quot;heading-5&quot;&gt;Heading 5&lt;/h5&gt;

&lt;h6 id=&quot;heading-6&quot;&gt;Heading 6&lt;/h6&gt;

&lt;h3 id=&quot;body-text&quot;&gt;Body text&lt;/h3&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, test link adipiscing elit. &lt;strong&gt;This is strong&lt;/strong&gt;. Nullam dignissim convallis est. Quisque aliquam.&lt;/p&gt;

&lt;p class=&quot;image-pull-right&quot;&gt;&lt;img src=&quot;/images/3953273590_704e3899d5_m.jpg&quot; alt=&quot;Smithsonian Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is emphasized&lt;/em&gt;. Donec faucibus. Nunc iaculis suscipit dui. 53 = 125. Water is H2O. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. The New York Times (That’s a citation). Underline.Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.&lt;/p&gt;

&lt;p&gt;HTML and CSS are our tools. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus. Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus.&lt;/p&gt;

&lt;h3 id=&quot;blockquotes&quot;&gt;Blockquotes&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Lorem ipsum dolor sit amet, test link adipiscing elit. Nullam dignissim convallis est. Quisque aliquam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;list-types&quot;&gt;List Types&lt;/h2&gt;

&lt;h3 id=&quot;ordered-lists&quot;&gt;Ordered Lists&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Item one
    &lt;ol&gt;
      &lt;li&gt;sub item one&lt;/li&gt;
      &lt;li&gt;sub item two&lt;/li&gt;
      &lt;li&gt;sub item three&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Item two&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;unordered-lists&quot;&gt;Unordered Lists&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Item one&lt;/li&gt;
  &lt;li&gt;Item two&lt;/li&gt;
  &lt;li&gt;Item three&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;

&lt;table rules=&quot;groups&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Header1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Header2&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Header3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;cell1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cell2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cell3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;cell4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cell5&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cell6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;cell1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cell2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cell3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;cell4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cell5&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;cell6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Foot1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Foot2&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Foot3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;

&lt;h2 id=&quot;code-snippets&quot;&gt;Code Snippets&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-240px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;buttons&quot;&gt;Buttons&lt;/h2&gt;

&lt;p&gt;Make any link standout more when applying the &lt;code&gt;.btn&lt;/code&gt; class.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;btn btn-success&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Success Button&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div&gt;&lt;a href=&quot;#&quot; class=&quot;btn&quot;&gt;Primary Button&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn-success&quot;&gt;Success Button&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn-warning&quot;&gt;Warning Button&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn-danger&quot;&gt;Danger Button&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn-info&quot;&gt;Info Button&lt;/a&gt;&lt;/div&gt;

&lt;h2 id=&quot;notices&quot;&gt;Notices&lt;/h2&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Watch out!&lt;/strong&gt; You can also add notices by appending &lt;code&gt;{: .notice}&lt;/code&gt; to a paragraph.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/sample-post/&quot;&gt;Sample Post&lt;/a&gt; was originally published by Olli Pöyry at &lt;a href=&quot;&quot;&gt;Essaim Apps Oy&lt;/a&gt; on March 10, 2011.&lt;/p&gt;</content>
</entry>

</feed>
